from shiny import ui, render, reactive
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import shap
from shared import streaming_df, rf_models, rf_explainers, iso_model, iso_features
from utils import model_utils, rule_engine
from viz import (
    control_plots as cp,
    correlation_plots as corrp,
    model_perf_plots as mp,
    shap_plots2 as sp
)

# ============================
# üî§ Font & Matplotlib ÏÑ§Ï†ï
# ============================
plt.rcParams["font.family"] = ["Malgun Gothic", "Segoe UI Emoji", "Apple Color Emoji"]
plt.rcParams["axes.unicode_minus"] = False

# ============================
# üåà Custom Style
# ============================
STYLE = """
    * { font-family: 'Noto Sans KR', sans-serif; }
    body { background-color: #f5f7fa; }
    h2, h3, h4 { color: #1f2937; font-weight: 700; }
    .section-card {
        border-radius: 12px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.05);
        margin-bottom: 2rem;
        padding: 1rem;
        background: white;
    }
    .sub-note {
        color: #6b7280;
        font-size: 0.85rem;
        margin-top: 0.5rem;
    }
"""


# ============================
# üìä UI
# ============================
def ui_quality_analysis():
    return ui.page_fluid(
        ui.tags.style(STYLE),
        ui.h2("‚öôÔ∏è ÌíàÏßà Í¥ÄÎ¶¨¬∑Î∂ÑÏÑù ÎåÄÏãúÎ≥¥Îìú", class_="text-center mb-4"),

        # üìÖ Í∏∞Í∞Ñ ÌïÑÌÑ∞
        ui.card(
            ui.card_header("üìÖ Î∂ÑÏÑù Í∏∞Í∞Ñ ÏÑ†ÌÉù"),
            ui.layout_columns(
                ui.input_date_range(
                    "date_range", "Í∏∞Í∞Ñ ÏÑ†ÌÉù",
                    start="2025-01-01", end="2025-12-31"
                ),
                ui.div("ÏÑ†ÌÉùÌïú Í∏∞Í∞ÑÏùò Îç∞Ïù¥ÌÑ∞Îßå Î∂ÑÏÑùÏóê Î∞òÏòÅÎê©ÎãàÎã§.", class_="sub-note mt-2"),
                col_widths=[6, 6]
            ),
            class_="section-card"
        ),

        # ‚ë† Í≥µÏ†ï ÏÉÅÌÉú ÏßÑÎã®
        ui.div(
            ui.h4("üìà ‚ë† Í≥µÏ†ï ÏÉÅÌÉú ÏßÑÎã®"),
            ui.div("Í≥µÏ†ï Î≥ÄÏàòÎ≥Ñ Ïù¥ÏÉÅ Ïó¨Î∂ÄÏôÄ Rule Í∏∞Î∞ò ÌÉêÏßÄ Í≤∞Í≥ºÎ•º ÌôïÏù∏Ìï©ÎãàÎã§.", class_="sub-note"),
            ui.layout_columns(
                ui.div(
                    ui.input_select("mold_select", "Í∏àÌòï ÏÑ†ÌÉù", list(rf_models.keys())),
                    ui.input_select(
                        "feature_select", "Í≥µÏ†ï Î≥ÄÏàò ÏÑ†ÌÉù",
                        ["molten_temp", "cast_pressure", "sleeve_temperature", "upper_mold_temp1"],
                        selected="molten_temp"
                    ),
                    ui.output_plot("control_chart", height="260px"),
                    ui.output_plot("anomaly_plot", height="260px"),
                    class_="p-3"
                ),
                ui.div(
                    ui.h5("‚ö†Ô∏è Rule Í∏∞Î∞ò ÌÉêÏßÄ Í≤∞Í≥º", class_="fw-bold mb-2"),
                    ui.output_table("rule_table"),
                    class_="p-3"
                ),
                col_widths=[8, 4]
            ),
            class_="section-card"
        ),

        # ‚ë° Ïù¥ÏÉÅ ÏõêÏù∏ Î∂ÑÏÑù
        ui.div(
            ui.h4("üîç ‚ë° Ïù¥ÏÉÅ ÏõêÏù∏ Î∂ÑÏÑù"),
            ui.div("Î∂àÎüâ Î∞úÏÉùÏóê ÏòÅÌñ•ÏùÑ ÎØ∏ÏπòÎäî Ï£ºÏöî Î≥ÄÏàòÏôÄ ÏòÅÌñ• Î∞©Ìñ•ÏùÑ ÏãúÍ∞ÅÌôîÌï©ÎãàÎã§.", class_="sub-note"),
            ui.layout_columns(
                ui.div(
                    ui.output_plot("feature_importance", height="300px"),
                    ui.div("üìä RandomForest Í∏∞Î∞ò Î≥ÄÏàò Ï§ëÏöîÎèÑ", class_="sub-note")
                ),
                ui.div(
                    ui.output_plot("shap_summary", height="300px"),
                    ui.div("üí° SHAP Summary Plot ‚Äî Î≥ÄÏàò ÏòÅÌñ•Î†• Ìï¥ÏÑù", class_="sub-note")
                ),
                col_widths=[6, 6]
            ),
            ui.card(
                ui.card_header("‚ö° Í∞úÎ≥Ñ ÏºÄÏù¥Ïä§ Ìï¥ÏÑù (SHAP Force Plot)"),
                ui.input_slider("sample_index", "ÏÉòÌîå ÏÑ†ÌÉù", min=0, max=200, value=0),
                ui.output_ui("shap_force_plot"),
                class_="p-3 mt-3"
            ),
            class_="section-card"
        ),

        # ‚ë¢ ÌíàÏßà ÏòÅÌñ• Í¥ÄÍ≥Ñ Î∂ÑÏÑù
        ui.div(
            ui.h4("üîÑ ‚ë¢ ÌíàÏßà ÏòÅÌñ• Í¥ÄÍ≥Ñ Î∂ÑÏÑù"),
            ui.div("Î≥ÄÏàò Í∞ÑÏùò Ïó∞Í¥ÄÏÑ±Í≥º Ìå®ÌÑ¥ÏùÑ ÌÜµÌï¥ ÌíàÏßà ÌäπÏÑ±ÏùÑ ÌååÏïÖÌï©ÎãàÎã§.", class_="sub-note"),
            ui.layout_columns(
                ui.div(
                    ui.output_plot("corr_plot", height="300px"),
                    ui.div("üîó Î≥ÄÏàò Í∞Ñ ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ Heatmap", class_="sub-note")
                ),
                ui.div(
                    ui.output_plot("scatter_plot", height="300px"),
                    ui.div("üìà Ï£ºÏöî Î≥ÄÏàò Í∞Ñ Í¥ÄÍ≥Ñ (ÏÇ∞Ï†êÎèÑ)", class_="sub-note")
                ),
                col_widths=[6, 6]
            ),
            class_="section-card"
        ),

        # ‚ë£ Î™®Îç∏ ÏÑ±Îä• Î∞è Í∞úÏÑ† Í≤ÄÏ¶ù
        ui.div(
            ui.h4("üß† ‚ë£ Î™®Îç∏ ÏÑ±Îä• Î∞è Í∞úÏÑ† Í≤ÄÏ¶ù"),
            ui.div("Î™®Îç∏Ïùò ÏòàÏ∏° ÏÑ±Îä•ÏùÑ ÌôïÏù∏ÌïòÍ≥† Í∞úÏÑ† Ìè¨Ïù∏Ìä∏Î•º ÎèÑÏ∂úÌï©ÎãàÎã§.", class_="sub-note"),
            ui.layout_columns(
                ui.div(ui.output_plot("confusion_matrix", height="280px")),
                ui.div(ui.output_plot("roc_curve", height="280px")),
                col_widths=[6, 6]
            ),
            ui.div(
                ui.h5("üóí ÏµúÍ∑º ÏòàÏ∏° Í≤∞Í≥º ÏÉòÌîå", class_="fw-bold mt-3 mb-2"),
                ui.output_table("recent_table"),
                class_="p-3"
            ),
            class_="section-card"
        ),
    )


# ============================
# üß† SERVER
# ============================
def server_quality_analysis(input, output, session):

    # ‚úÖ Í∏∞Í∞Ñ ÌïÑÌÑ∞ÎßÅ
    @reactive.calc
    def filtered_df():
        df = streaming_df.copy()
        if "datetime" in df.columns:
            start, end = input.date_range()
            df = df[
                (df["datetime"] >= pd.to_datetime(start)) &
                (df["datetime"] <= pd.to_datetime(end))
            ]
        return df

    # ‚ë† Í¥ÄÎ¶¨ÎèÑ
    @output
    @render.plot
    def control_chart():
        df = filtered_df()
        feature = input.feature_select()
        if feature not in df.columns or df[feature].empty:
            fig, ax = plt.subplots()
            ax.text(0.5, 0.5, "‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå", ha="center", va="center")
            ax.axis("off")
            return fig
        return cp.plot_xbar_r_chart(df[feature])

    # ‚ë° Ïù¥ÏÉÅÌÉêÏßÄ
    @output
    @render.plot
    def anomaly_plot():
        df = filtered_df()
        feature = input.feature_select()
        if iso_model is None or feature not in iso_features:
            fig, ax = plt.subplots()
            ax.text(0.5, 0.5, "‚ö†Ô∏è Isolation Forest Î™®Îç∏Ïù¥ ÏóÜÏäµÎãàÎã§.", ha="center", va="center")
            ax.axis("off")
            return fig

        subset = df[iso_features].dropna()
        if subset.empty:
            fig, ax = plt.subplots()
            ax.text(0.5, 0.5, "‚ö†Ô∏è ÏÑ†ÌÉùÌïú Í∏∞Í∞Ñ ÎÇ¥ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.", ha="center", va="center")
            ax.axis("off")
            return fig

        try:
            preds = iso_model.predict(subset)
        except Exception:
            fig, ax = plt.subplots()
            ax.text(0.5, 0.5, "‚ö†Ô∏è ÏòàÏ∏° Î∂àÍ∞Ä (Î™®Îç∏ ÏûÖÎ†• Ïò§Î•ò)", ha="center", va="center")
            ax.axis("off")
            return fig

        outlier_idx = subset[preds == -1].index
        fig, ax = plt.subplots(figsize=(9, 4))
        ax.plot(df.index, df[feature], label="Ï†ïÏÉÅ", color="#3b82f6", lw=1.5)
        ax.scatter(outlier_idx, df.loc[outlier_idx, feature], color="#ef4444", s=25, label="Ïù¥ÏÉÅÏπò")
        ax.legend()
        ax.set_title(f"Ïù¥ÏÉÅÌÉêÏßÄ Í≤∞Í≥º ({feature})", fontsize=11)
        plt.tight_layout()
        return fig

    @output
    @render.table
    def rule_table():
        df = filtered_df()
        return rule_engine.apply_rules(df)

    # ‚ë¢ Î™®Îç∏ Î°úÎìú Î∞è SHAP
    @reactive.calc
    def get_model():
        mold_code = input.mold_select()
        model, explainer = model_utils.load_model_and_shap(mold_code)
        return model, explainer

    @output
    @render.plot
    def feature_importance():
        model, _ = get_model()
        return model_utils.plot_feature_importance(model)

    @output
    @render.plot
    def shap_summary():
        df = filtered_df()
        model, explainer = get_model()
        sample = df.select_dtypes(include=["float64", "int64"]).head(200)
        try:
            shap_values = explainer(model.named_steps["preprocess"].transform(sample))
            fig = plt.figure(figsize=(6, 4))
            sp.plot_shap_summary(shap_values, sample)
            plt.tight_layout()
            return fig
        except Exception as e:
            fig, ax = plt.subplots()
            ax.text(0.5, 0.5, f"‚ö†Ô∏è SHAP Í≥ÑÏÇ∞ Î∂àÍ∞Ä: {e}", ha="center", va="center")
            ax.axis("off")
            return fig

    @output
    @render.ui
    def shap_force_plot():
        df = filtered_df()
        model, explainer = get_model()
        sample = df.select_dtypes(include=["float64", "int64"]).head(200)
        idx = input.sample_index()
        if sample.empty or idx >= len(sample):
            return ui.div("‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞ Î∂ÄÏ°±", class_="text-muted")
        try:
            shap_values = explainer(model.named_steps["preprocess"].transform(sample))
            shap_html = shap.force_plot(
                explainer.expected_value,
                shap_values.values[idx, :],
                sample.iloc[idx, :],
                matplotlib=False
            ).html()
            return ui.HTML(shap_html)
        except Exception as e:
            return ui.div(f"‚ö†Ô∏è SHAP Force Plot Ïò§Î•ò: {e}", class_="text-muted")

    # ‚ë£ ÏÉÅÍ¥ÄÍ¥ÄÍ≥Ñ / ÏÑ±Îä•
    @output
    @render.plot
    def corr_plot():
        return corrp.plot_corr(filtered_df())

    @output
    @render.plot
    def scatter_plot():
        df = filtered_df()
        numeric_cols = df.select_dtypes(include=["float64", "int64"]).columns.tolist()
        if len(numeric_cols) < 2:
            fig, ax = plt.subplots()
            ax.text(0.5, 0.5, "‚ö†Ô∏è ÏàòÏπòÌòï Î≥ÄÏàòÍ∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§.", ha="center", va="center")
            ax.axis("off")
            return fig
        x, y = numeric_cols[:2]
        fig, ax = plt.subplots(figsize=(6, 4))
        sns.scatterplot(x=df[x], y=df[y], s=15, color="#3b82f6", alpha=0.6, ax=ax)
        ax.set_xlabel(x)
        ax.set_ylabel(y)
        ax.set_title(f"{x} vs {y}", fontsize=11)
        plt.tight_layout()
        return fig

    @output
    @render.plot
    def confusion_matrix():
        df = filtered_df()
        mold_code = input.mold_select()
        model, _ = model_utils.load_model_and_shap(mold_code)
        sub = df.dropna(subset=["passorfail"])
        if sub.empty:
            fig, ax = plt.subplots()
            ax.text(0.5, 0.5, "‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå", ha="center", va="center")
            ax.axis("off")
            return fig
        return mp.plot_confusion_matrix(sub, model)

    @output
    @render.plot
    def roc_curve():
        df = filtered_df()
        mold_code = input.mold_select()
        model, _ = model_utils.load_model_and_shap(mold_code)
        sub = df.dropna(subset=["passorfail"])
        if sub.empty:
            fig, ax = plt.subplots()
            ax.text(0.5, 0.5, "‚ö†Ô∏è Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå", ha="center", va="center")
            ax.axis("off")
            return fig
        return mp.plot_roc_curve(sub, model)

    @output
    @render.table
    def recent_table():
        return filtered_df().tail(10).round(2)
